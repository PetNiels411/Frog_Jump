<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Doodle Jump Clone</title>
  <style>
    body { margin: 0; overflow: hidden; background: #cceeff; }
    canvas { display: block; margin: 0 auto; background: #e0ffe0; border: 2px solid #333; }
    #restartButton, #startButton {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 10px 20px;
      font-size: 18px;
    }
    #restartButton { display: none; }
    #instructions {
      position: absolute;
      top: 10px;
      right: 10px;
      width: 200px;
      font-family: Arial, sans-serif;
      font-size: 14px;
      color: #333;
      background: rgba(255,255,255,0.7);
      padding: 10px;
      border-radius: 8px;
    }
    #scoreDisplay, #historyDisplay {
      position: absolute;
      left: 10px;
      font-size: 18px;
      font-family: Arial, sans-serif;
      color: #333;
    }
    #scoreDisplay { top: 10px; }
    #historyDisplay { top: 40px; }
  </style>
</head>
<body>
<div id="scoreDisplay">Score: 0</div>
<div id="historyDisplay">Previous Scores: None</div>
<div id="instructions">
  Controls:<br>
  ↑ Up Arrow = Jump<br>
  ← Left Arrow = Move Left<br>
  → Right Arrow = Move Right<br><br>
  Land on a platform 3 times and it disappears!
</div>
<canvas id="gameCanvas" width="400" height="600"></canvas>
<button id="startButton">Start Game</button>
<button id="restartButton">Restart</button>
<script>
  const canvas = document.getElementById("gameCanvas");
  const ctx = canvas.getContext("2d");
  const startButton = document.getElementById("startButton");
  const restartButton = document.getElementById("restartButton");
  const scoreDisplay = document.getElementById("scoreDisplay");
  const historyDisplay = document.getElementById("historyDisplay");

  let player = {
    x: 200,
    y: 0,
    width: 40,
    height: 40,
    velocityY: 0,
    jumpPower: -10,
    gravity: 0.4,
    onGround: false,
    lastPlatform: null,
    currentPlatform: null,
    jumpedSinceLastLanding: true
  };

  let platforms = [];
  const platformCount = 6;
  let score = 0;
  let scoreHistory = [];
  let keys = { left: false, right: false, up: false };
  let gameOver = false;
  let gameStarted = false;

  const AudioContext = window.AudioContext || window.webkitAudioContext;
  const audioCtx = new AudioContext();

  function playBeep(freq, duration = 200, fadeOut = false) {
    const osc = audioCtx.createOscillator();
    const gain = audioCtx.createGain();
    osc.connect(gain);
    gain.connect(audioCtx.destination);
    osc.type = "square";
    osc.frequency.value = freq;
    gain.gain.setValueAtTime(0.2, audioCtx.currentTime);
    if (fadeOut) gain.gain.exponentialRampToValueAtTime(0.01, audioCtx.currentTime + duration / 1000);
    osc.start();
    osc.stop(audioCtx.currentTime + duration / 1000);
  }

  function createPlatforms() {
    platforms = [];
    for (let i = 0; i < platformCount; i++) {
      let p = {
        id: i + '-' + Date.now(),
        x: Math.random() * (canvas.width - 70),
        y: canvas.height - (i + 1) * 80,
        width: 70,
        height: 20,
        landings: 0
      };
      platforms.push(p);
    }
    player.y = platforms[0].y - player.height;
    player.x = platforms[0].x + (platforms[0].width - player.width) / 2;
    player.velocityY = 0;
    player.onGround = true;
    player.lastPlatform = null;
    player.currentPlatform = null;
    player.jumpedSinceLastLanding = false;
  }

  function drawPlayer() {
  // Draw frog body
  ctx.fillStyle = "#4caf50";
  ctx.beginPath();
  ctx.ellipse(player.x + player.width / 2, player.y + player.height / 2, player.width / 2, player.height / 2, 0, 0, 2 * Math.PI);
  ctx.fill();

  // Draw eyes
  ctx.fillStyle = "#ffffff";
  ctx.beginPath();
  ctx.arc(player.x + player.width * 0.3, player.y + player.height * 0.3, 5, 0, 2 * Math.PI);
  ctx.arc(player.x + player.width * 0.7, player.y + player.height * 0.3, 5, 0, 2 * Math.PI);
  ctx.fill();

  // Draw pupils
  ctx.fillStyle = "#000000";
  ctx.beginPath();
  ctx.arc(player.x + player.width * 0.3, player.y + player.height * 0.3, 2, 0, 2 * Math.PI);
  ctx.arc(player.x + player.width * 0.7, player.y + player.height * 0.3, 2, 0, 2 * Math.PI);
  ctx.fill();

  // Draw smile
  ctx.strokeStyle = "#000000";
  ctx.beginPath();
  ctx.arc(player.x + player.width / 2, player.y + player.height * 0.6, 8, 0, Math.PI);
  ctx.stroke();
  }

  function drawPlatforms() {
    ctx.fillStyle = "#2e7d32";
    platforms.forEach(p => {
      ctx.beginPath();
      ctx.moveTo(p.x, p.y + p.height / 2);
      ctx.quadraticCurveTo(p.x + p.width / 2, p.y - 10, p.x + p.width, p.y + p.height / 2);
      ctx.quadraticCurveTo(p.x + p.width / 2, p.y + 20, p.x, p.y + p.height / 2);
      ctx.fill();
    });
  }

  function movePlayer() {
    if (keys.left) player.x -= 4;
    if (keys.right) player.x += 4;
    if (player.x + player.width < 0) player.x = canvas.width;
    if (player.x > canvas.width) player.x = -player.width;

    player.velocityY += player.gravity;
    player.y += player.velocityY;

    let landed = false;
    for (let i = platforms.length - 1; i >= 0; i--) {
      const p = platforms[i];
      if (
        player.velocityY > 0 &&
        player.x + player.width > p.x &&
        player.x < p.x + p.width &&
        player.y + player.height >= p.y &&
        player.y + player.height <= p.y + p.height
      ) {
        if (player.jumpedSinceLastLanding) {
          p.landings++;
          player.jumpedSinceLastLanding = false;
          playBeep(440);

          if (p.landings >= 3) {
            platforms.splice(i, 1);
            player.currentPlatform = null;
            return;
          } else {
            player.currentPlatform = p;
          }
        }

        player.y = p.y - player.height;
        player.velocityY = 0;
        landed = true;

        if (player.lastPlatform !== p) {
          player.lastPlatform = p;
          score++;
          scoreDisplay.textContent = "Score: " + score;
        }
        break;
      }
    }
    player.onGround = landed;

    if (keys.up && player.onGround) {
      player.velocityY = player.jumpPower;
      player.onGround = false;
      player.jumpedSinceLastLanding = true;

      if (player.currentPlatform && player.currentPlatform.landings >= 2) {
        const index = platforms.indexOf(player.currentPlatform);
        if (index !== -1) {
          platforms.splice(index, 1);
          player.currentPlatform = null;
        }
      }
    }

    if (player.y > canvas.height) {
      playBeep(220, 700, true);
      gameOver = true;
      restartButton.style.display = "block";
      ctx.font = "36px Arial";
      ctx.fillStyle = "red";
      ctx.fillText("Game Over", canvas.width / 2 - 90, canvas.height / 2 - 50);
    }
  }

  function movePlatforms() {
    if (player.y < 200) {
      platforms.forEach(p => {
        p.y += Math.abs(player.velocityY);
        if (p.y > canvas.height) {
          p.y = 0;
          p.x = Math.random() * (canvas.width - 70);
          p.landings = 0;
        }
      });
    }
  }

  function gameLoop() {
    if (!gameStarted || gameOver) return;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawPlatforms();
    drawPlayer();
    movePlayer();
    movePlatforms();
    requestAnimationFrame(gameLoop);
  }

  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft") keys.left = true;
    if (e.key === "ArrowRight") keys.right = true;
    if (e.key === "ArrowUp") keys.up = true;
  });
  document.addEventListener("keyup", (e) => {
    if (e.key === "ArrowLeft") keys.left = false;
    if (e.key === "ArrowRight") keys.right = false;
    if (e.key === "ArrowUp") keys.up = false;
  });

  startButton.addEventListener("click", () => {
    audioCtx.resume();
    gameStarted = true;
    startButton.style.display = "none";
    createPlatforms();
    gameLoop();
  });

  restartButton.addEventListener("click", () => {
    scoreHistory.push(score);
    historyDisplay.textContent = "Previous Scores: " + scoreHistory.join(", ");
    score = 0;
    scoreDisplay.textContent = "Score: 0";
    gameOver = false;
    restartButton.style.display = "none";
    createPlatforms();
    gameLoop();
  });

  window.onload = () => {
    createPlatforms();
    drawPlatforms();
    drawPlayer();
  };
</script>
</body>
</html>
